#!/usr/bin/env python

import gi
gi.require_version("Gtk", "3.0")
from gi.repository import Gtk, Gdk

import ast
import operator as op

# supported operators
operators = {ast.Add: op.add, ast.Sub: op.sub, ast.Mult: op.mul,
             ast.Div: op.truediv, ast.Pow: op.pow, ast.BitXor: op.xor,
             ast.USub: op.neg}

def calc(expr):
  """
  >>> eval_expr('2^6')
  4
  >>> eval_expr('2**6')
  64
  >>> eval_expr('1 + 2*3**(4^5) / (6 + -7)')
  -5.0
  """
  return eval_(ast.parse(expr, mode='eval').body)

def eval_(node):
  if isinstance(node, ast.Num): # <number>
    return node.n
  elif isinstance(node, ast.BinOp): # <left> <operator> <right>
    return operators[type(node.op)](eval_(node.left), eval_(node.right))
  elif isinstance(node, ast.UnaryOp): # <operator> <operand> e.g., -1
    return operators[type(node.op)](eval_(node.operand))
  else:
    raise TypeError(node)

# ----------------------------------------


css = b"""

window {
    font-size: 10mm;
    font-family: monospace;
}

entry {
    margin: 2mm;
    border-style: solid;
    border-width: 1mm;
    border-color: rgb(140, 190, 180);
    background: rgba(140, 190, 180, 0.1);
    font-size: 12mm;
    padding: 2mm 2mm 2mm 2mm;
}

label {
    padding: 0mm 1mm 0mm 1mm;
}

button {
    /* border-width: 1mm; */
    margin: 1mm;
    padding: 0mm 0mm 0mm 0mm;
}

button.parents {
    border-color: rgba(0, 0, 255, 0.5);
}

button.calc {
    border-color: rgba(0, 255, 0, 0.5);
}

button.pad {
    border-color: rgba(255, 99, 71, 0.5);
    font-size: 15mm;
}

button.editing {
    border-color: rgba(255, 0, 0, 0.5);
}

button.equal {
    border-color: rgba(255, 99, 71, 0.5);
    font-size: 15mm
}

button.equal label {
    background-color: rgba(255, 99, 71, 0.2);
}

button.pad label {
    background-color: rgba(255, 99, 71, 0.05);
    padding: 0mm 6mm 0mm 6mm;
}

button.calc label {
    background-color: rgba(0, 255, 0, 0.05);
}

button.parents label {
    background-color: rgba(0, 0, 255, 0.05);
}

button.editing label {
    border-color: rgba(255, 0, 0, 0.05);
}

"""

sp = Gtk.CssProvider()
sp.load_from_data(css)
Gtk.StyleContext.add_provider_for_screen(Gdk.Screen.get_default(), sp, Gtk.STYLE_PROVIDER_PRIORITY_APPLICATION)


# ----------------------------------------

class callbacks:

  def __init__(self):
    self.variable_css = "window { font-size: %smm; }\nentry { font-size: %smm; }\nbutton.pad,button.equal { font-size: %smm; }"
    self.var_sp = Gtk.CssProvider()
    self.previous_height = 0
    Gtk.StyleContext.add_provider_for_screen(Gdk.Screen.get_default(), self.var_sp, Gtk.STYLE_PROVIDER_PRIORITY_APPLICATION)

  def equal(self,widget):
    # get expression text to calulate, replace "^" with "**" which is understood as pow by ast module
    m=tb.get_text().replace("^","**")
    if m != "":
      try:
        res=str(calc(m))
      except:
        res="ERR"
      tb.set_text(res)
      tb.set_position(9999)
    tb.grab_focus_without_selecting()

  def button(self,widget):
    m=tb.get_text()
    if m[0:3] == "ERR":
      tb.set_text("")
    tb.insert_text(widget._value,tb.get_position())
    tb.set_position(tb.get_position()+1)
    tb.grab_focus_without_selecting()

  def negation(self,widget):
    m=tb.get_text()
    if m == "":
      tb.set_text("-")
    elif m == "-":
      tb.set_text("")
    elif m[0] == "-":
      m=m[1:]
      if m[0]=="(" and m[-1]==")":
        tb.set_text(m)
      elif any(elem in m for elem in "+-*/()"):
        tb.set_text("-(" + m + ")")
      else:
        tb.set_text(m)
    else:
      if m[0]=="(" and m[-1]==")":
        tb.set_text("-" + m)
      elif any(elem in m for elem in "+-*/()"):
        tb.set_text("-(" + m + ")")
      else:
        tb.set_text("-" + m)
    tb.set_position(9999)
    tb.grab_focus_without_selecting()

  def reverse(self,widget):
    m=tb.get_text()
    if m[0]=="(" and m[-1]==")":
      tb.set_text("1/"+m)
    elif any(elem in m for elem in "+-*/()"):
      tb.set_text("1/(" + m + ")")
    else:
      tb.set_text("1/"+m)
    tb.set_position(9999)
    tb.grab_focus_without_selecting()

  def clear(self,widget):
    tb.set_text("")
    tb.grab_focus_without_selecting()

  def back(self,widget):
    tb.delete_text(tb.get_position()-1,tb.get_position())
    tb.grab_focus_without_selecting()

  def window_configure_event(self,window,event):
      if self.previous_height == 0:
        self.previous_height=event.height
      else:
        size_window=round(10*event.height/self.previous_height,1)
        size_entry=round(12*event.height/self.previous_height,1)
        size_pad=round(15*event.height/self.previous_height,1)
        css = self.variable_css % (size_window, size_entry, size_pad)
        print(css)
        self.var_sp.load_from_data(bytes(css.encode()));

x=callbacks()

# ----------------------------------------

def create_button(label,grid,posx,posy,sizex=None,sizey=None,value=None,callback=None,color=None,markup=None):
  btn=Gtk.Button(label="")
  btn.get_child().set_markup(label)
  btn.set_hexpand(True)
  btn.set_vexpand(True)
  if not markup is None:
    btn.get_style_context().add_class(str(markup))
    btn.grab_focus()
  if sizex is None:
    sizex=1
  if sizey is None:
    sizey=1
  if not value is None:
    btn._value=str(value)
  else:
    btn._value=str(label).strip()
  grid.attach(btn,posx,posy,sizex,sizey)
  if not callback is None:
    btn.connect("clicked",callback)
  return btn

g1=Gtk.Grid()

tb=Gtk.Entry()
tb.connect("activate",x.equal)
#tbcontext = tb.get_style_context()
#tbcontext.add_provider(sp,Gtk.STYLE_PROVIDER_PRIORITY_USER)

t1=Gtk.Grid()
t2=Gtk.Grid()

#geometry = Gdk.Display.get_primary_monitor(Gdk.Display.get_default()).get_geometry()
#print(geometry)

w=Gtk.Window()

w.add(g1)

#tb.modify_font(Pango.FontDescription("sans,monospace condensed bold 24"))

create_button(label="7", callback=x.button, grid=t1, posx=0, posy=0, markup="pad")
create_button(label="8", callback=x.button, grid=t1, posx=1, posy=0, markup="pad")
create_button(label="9", callback=x.button, grid=t1, posx=2, posy=0, markup="pad")
create_button(label="4", callback=x.button, grid=t1, posx=0, posy=1, markup="pad")
create_button(label="5", callback=x.button, grid=t1, posx=1, posy=1, markup="pad")
create_button(label="6", callback=x.button, grid=t1, posx=2, posy=1, markup="pad")
create_button(label="1", callback=x.button, grid=t1, posx=0, posy=2, markup="pad")
create_button(label="2", callback=x.button, grid=t1, posx=1, posy=2, markup="pad")
create_button(label="3", callback=x.button, grid=t1, posx=2, posy=2, markup="pad")
create_button(label="0", callback=x.button, grid=t1, posx=0, posy=3, markup="pad")
create_button(label=".", callback=x.button, grid=t1, posx=1, posy=3, markup="pad")
beq=create_button(label="=", callback=x.equal, grid=t1, posx=2, posy=3, sizex=2, markup="equal")

create_button(label=u"\u21A9", value="", callback=x.back, grid=t2, posx=0, posy=0, markup="editing")
create_button(label="(", callback=x.button, grid=t2, posx=0, posy=1, markup="parents")
create_button(label=u"\U0001D465\u207F", value="^", callback=x.button, grid=t2, posx=0, posy=2, markup="calc")
create_button(label=u"\u00F7", value="/", callback=x.button, grid=t2, posx=0, posy=3, markup="calc")
create_button(label=u"\u00D7", value="*", callback=x.button, grid=t2, posx=0, posy=4, markup="calc")
create_button(label=u"\u2212", value="-", callback=x.button, grid=t2, posx=0, posy=5, markup="calc")
create_button(label="C", callback=x.clear, grid=t2, posx=1, posy=0, markup="editing")
create_button(label=")", callback=x.button, grid=t2, posx=1, posy=1, markup="parents")
create_button(label=u"\u00B1", value="+-", callback=x.negation, grid=t2, posx=1, posy=2, markup="calc")
#create_button(label=u"\U0001D465\u207B\u00B9", value="", callback=x.reverse, grid=t2, posx=1, posy=3, markup="calc")
create_button(label=u"<sup>1</sup>/<sub>\U0001D465</sub>", value="", callback=x.reverse, grid=t2, posx=1, posy=3, markup="calc")
create_button(label=u"\uFF0B", value="+", callback=x.button, grid=t2, posx=1, posy=4, sizey=2, markup="calc")

beq.grab_focus()

t1.set_property("margin",10)
t2.set_property("margin",6)

g1.set_row_homogeneous(False)
g1.set_column_homogeneous(False)
g1.set_column_spacing(10)
g1.set_row_spacing(10)
g1.set_halign(Gtk.Align.FILL);

t1.set_hexpand(True);
t1.set_vexpand(True);
t1.set_halign(Gtk.Align.FILL);
t2.set_hexpand(True);
t2.set_vexpand(True);
t2.set_halign(Gtk.Align.FILL);

t1.set_column_spacing(10)
t1.set_row_spacing(10)
t2.set_column_spacing(8)
t2.set_row_spacing(8)

t1.set_row_homogeneous(True)
t1.set_column_homogeneous(False)
t2.set_row_homogeneous(True)
t2.set_column_homogeneous(True)

g1.attach(tb,0,0,20,1)
g1.attach(t1,0,1,16,1)
g1.attach(t2,16,1,4,1)

w.show_all()
w.connect("delete-event",Gtk.main_quit)
w.connect("configure-event", x.window_configure_event)
Gtk.main()
